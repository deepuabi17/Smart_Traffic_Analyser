# -*- coding: utf-8 -*-
"""Numberplate.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xx4itj6krNLR5SewNnoVa4yEAnsmu-G8
"""

import cv2
import os
import numpy as np
from google.colab.patches import cv2_imshow
from google.colab import drive
drive.mount('/content/drive')
def is_similar(image1, image2, threshold=0.85):

    hist1 = cv2.calcHist([image1], [0], None, [256], [0, 256])
    hist2 = cv2.calcHist([image2], [0], None, [256], [0, 256])
    hist1 = cv2.normalize(hist1, hist1).flatten()
    hist2 = cv2.normalize(hist2, hist2).flatten()
    similarity = cv2.compareHist(hist1, hist2, cv2.HISTCMP_CORREL)
    return similarity > threshold

def is_valid_plate(plate):

    h, w = plate.shape[:2]
    aspect_ratio = w / h
    return 2.0 < aspect_ratio < 6.0

def npd():
    i = 1
    previous_plate = None

    video_path = "/content/drive/MyDrive/Smarttraffic/numberplate/number.mp4"
    cascade_path = "/content/drive/MyDrive/Smarttraffic/numberplate/new.xml"

    if not os.path.exists(video_path) or not os.path.exists(cascade_path):
        print(" Error: File not found!")
        return

    output_dir = "/content/drive/MyDrive/Smarttraffic/numberplate/output"
    os.makedirs(output_dir, exist_ok=True)

    cap = cv2.VideoCapture(video_path)
    cascade = cv2.CascadeClassifier(cascade_path)

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            print("End of video reached.")
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        plates = cascade.detectMultiScale(
            gray, scaleFactor=1.2, minNeighbors=8, minSize=(80, 30)
        )

        for (x, y, w, h) in plates:
            if w * h < 2000:
                continue

            plate_img = gray[y:y + h, x:x + w]

            if not is_valid_plate(plate_img):
                continue

            if previous_plate is not None and is_similar(previous_plate, plate_img):
                continue

            previous_plate = plate_img
            cv2.imwrite(os.path.join(output_dir, f"Numberplate_{i}.jpg"), plate_img)

            i += 1

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()
    print(f"Unique plates saved in: {output_dir}")

npd()