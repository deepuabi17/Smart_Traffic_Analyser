# -*- coding: utf-8 -*-
"""classification and counting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SHPVsZpBAXRrBtgLwNfL9QqTd19905OS
"""

!pip install ultralytics opencv-python-headless numpy pandas torch torchvision torchaudio progressbar

from ultralytics import YOLO
import cv2
import csv
import datetime
import os
import progressbar
import numpy as np


from google.colab import drive
drive.mount('/content/drive')


drive_path = "/content/drive/MyDrive/Smarttraffic/vehicle_classification/"
os.makedirs(drive_path, exist_ok=True)

csv_file = os.path.join(drive_path, "vehicledata.csv")
output_video = os.path.join(drive_path, "output_classified.mp4")
video_path = os.path.join(drive_path, "test.mp4")


def store(data):
    with open(csv_file, 'a', newline='') as csvfile:
        fieldnames = data.keys()
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        if csvfile.tell() == 0:
            writer.writeheader()
        writer.writerow(data)


def classify(video_path):
    d = {}
    frame_count = 0
    skip_frames = 20

    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        print("Error: Unable to load video. Check file path!")
        return

    fps = cap.get(cv2.CAP_PROP_FPS)
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    max_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

    print(f" Video loaded: {video_path}")
    print(f" Resolution: {width}x{height}, FPS: {fps}")

    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    video_writer = cv2.VideoWriter(output_video, fourcc, fps, (width, height))
    if not video_writer.isOpened():
        print(" Error: Unable to initialize video writer.")
        return

    try:
        model = YOLO("yolov8n.pt")
    except Exception as e:
        print(f" Error loading YOLO model: {e}")
        return

    bar = progressbar.ProgressBar(maxval=max_frames).start()

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            print(" End of video reached.")
            break

        frame_count += 1
        if frame_count % skip_frames != 0:
            continue

        results = model.predict(frame, verbose=False)

        detected_objects = set()

        for r in results:
            for box in r.boxes:
                x1, y1, x2, y2 = map(int, box.xyxy[0])
                conf = float(box.conf[0])
                cls = int(box.cls[0])
                label = model.names[cls]


                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.putText(frame, f"{label} {conf:.2f}", (x1, y1 - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)


                detected_objects.add(label)


        for obj in detected_objects:
            d[obj] = d.get(obj, 0) + 1

        d['TOTAL'] = sum(v for k, v in d.items() if isinstance(v, int))
        d['Date'] = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        store(d)


        font = cv2.FONT_HERSHEY_SIMPLEX
        y_offset = 20
        for key, value in d.items():
            cv2.putText(frame, f"{key}: {value}", (5, y_offset), font, 0.75, (0, 255, 255), 2, cv2.LINE_4)
            y_offset += 20

        video_writer.write(frame)
        bar.update(min(frame_count, max_frames))

        if frame_count % 50 == 0:
            print(f"Processed {frame_count} frames.")

    cap.release()
    video_writer.release()
    bar.finish()

    print(f" Video saved at: {output_video}")
    print(f" Data saved in CSV at: {csv_file}")


classify(video_path)
print(" Process completed! Check your Google Drive folder for the output video and CSV file.")

!git clone https://github.com/abewley/sort.git

import os

drive_path = "/content/drive/MyDrive/Smarttraffic/vehicle_classification/"
video_path = os.path.join(drive_path, "test.mp4")

# Check if file exists
if os.path.exists(video_path):
    print(f"‚úÖ Video file found: {video_path}")
else:
    print(f"‚ùå Video file NOT found at {video_path}. Check the path!")

def classify(video_path):
    print(f"üìÇ Checking video file at: {video_path}")

    cap = cv2.VideoCapture(video_path)

    if not cap.isOpened():
        print("‚ùå OpenCV cannot open the video inside classify function!")
        return

    fps = cap.get(cv2.CAP_PROP_FPS)
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

    print(f"üé• Video loaded successfully inside classify function.")
    print(f"üìè Resolution: {width}x{height}, FPS: {fps}")

    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    output_video = "/content/drive/MyDrive/Smarttraffic/vehicle_classification/output_classified.mp4"
    video_writer = cv2.VideoWriter(output_video, fourcc, fps, (width, height))

    if not video_writer.isOpened():
        print("‚ùå Error: Unable to initialize video writer.")
        return

    model = YOLO("yolov8n.pt")  # Ensure YOLO model file exists

    framecount = 0
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            print("‚ö†Ô∏è End of video reached or failed to read frame.")
            break

        framecount += 1
        print(f"‚úÖ Processing frame {framecount}")

        video_writer.write(frame)

    cap.release()
    video_writer.release()
    print(f"‚úÖ Video saved at: {output_video}")

import os
drive_path = "/content/drive/MyDrive/Smarttraffic/vehicle_classification/"
print(os.listdir(drive_path))  # This will show all files in the folder

!find /content/ -name "output_classified.mp4"